{
	"name": "git",
	"displayName": "%displayName%",
	"description": "%description%",
	"main": "./out/main",
	"scripts": {
		"compile": "gulp compile-extension:git",
		"update-emoji": "node ./build/update-emoji.js"
	},
	"contributes": {
		"colors": [
			{
				"defaults": {
					"dark": "#81b88b",
					"highContrast": "#a1e3ad",
					"highContrastLight": "#374e06",
					"light": "#587c0c"
				},
				"description": "%colors.added%",
				"id": "gitDecoration.addedResourceForeground"
			},
			{
				"defaults": {
					"dark": "#E2C08D",
					"highContrast": "#E2C08D",
					"highContrastLight": "#895503",
					"light": "#895503"
				},
				"description": "%colors.modified%",
				"id": "gitDecoration.modifiedResourceForeground"
			},
			{
				"defaults": {
					"dark": "#c74e39",
					"highContrast": "#c74e39",
					"highContrastLight": "#ad0707",
					"light": "#ad0707"
				},
				"description": "%colors.deleted%",
				"id": "gitDecoration.deletedResourceForeground"
			},
			{
				"defaults": {
					"dark": "#73C991",
					"highContrast": "#73C991",
					"highContrastLight": "#007100",
					"light": "#007100"
				},
				"description": "%colors.renamed%",
				"id": "gitDecoration.renamedResourceForeground"
			},
			{
				"defaults": {
					"dark": "#73C991",
					"highContrast": "#73C991",
					"highContrastLight": "#007100",
					"light": "#007100"
				},
				"description": "%colors.untracked%",
				"id": "gitDecoration.untrackedResourceForeground"
			},
			{
				"defaults": {
					"dark": "#8C8C8C",
					"highContrast": "#A7A8A9",
					"highContrastLight": "#8e8e90",
					"light": "#8E8E90"
				},
				"description": "%colors.ignored%",
				"id": "gitDecoration.ignoredResourceForeground"
			},
			{
				"defaults": {
					"dark": "#E2C08D",
					"highContrast": "#E2C08D",
					"highContrastLight": "#895503",
					"light": "#895503"
				},
				"description": "%colors.stageModified%",
				"id": "gitDecoration.stageModifiedResourceForeground"
			},
			{
				"defaults": {
					"dark": "#c74e39",
					"highContrast": "#c74e39",
					"highContrastLight": "#ad0707",
					"light": "#ad0707"
				},
				"description": "%colors.stageDeleted%",
				"id": "gitDecoration.stageDeletedResourceForeground"
			},
			{
				"defaults": {
					"dark": "#e4676b",
					"highContrast": "#c74e39",
					"highContrastLight": "#ad0707",
					"light": "#ad0707"
				},
				"description": "%colors.conflict%",
				"id": "gitDecoration.conflictingResourceForeground"
			},
			{
				"defaults": {
					"dark": "#8db9e2",
					"highContrast": "#8db9e2",
					"highContrastLight": "#1258a7",
					"light": "#1258a7"
				},
				"description": "%colors.submodule%",
				"id": "gitDecoration.submoduleResourceForeground"
			},
			{
				"defaults": {
					"dark": "editorCodeLens.foreground",
					"highContrast": "editorCodeLens.foreground",
					"highContrastLight": "editorCodeLens.foreground",
					"light": "editorCodeLens.foreground"
				},
				"description": "%colors.blameEditorDecoration%",
				"id": "git.blame.editorDecorationForeground"
			}
		],
		"commands": [
			{
				"category": "Git",
				"command": "git.continueInLocalClone",
				"enablement": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && remoteName",
				"icon": "$(repo-clone)",
				"title": "%command.continueInLocalClone%"
			},
			{
				"category": "Git",
				"command": "git.clone",
				"enablement": "!operationInProgress",
				"title": "%command.clone%"
			},
			{
				"category": "Git",
				"command": "git.cloneRecursive",
				"enablement": "!operationInProgress",
				"title": "%command.cloneRecursive%"
			},
			{
				"category": "Git",
				"command": "git.init",
				"enablement": "!operationInProgress",
				"icon": "$(add)",
				"title": "%command.init%"
			},
			{
				"category": "Git",
				"command": "git.openRepository",
				"enablement": "!operationInProgress",
				"title": "%command.openRepository%"
			},
			{
				"category": "Git",
				"command": "git.reopenClosedRepositories",
				"enablement": "!operationInProgress && git.closedRepositoryCount != 0",
				"icon": "$(repo)",
				"title": "%command.reopenClosedRepositories%"
			},
			{
				"category": "Git",
				"command": "git.close",
				"enablement": "!operationInProgress",
				"title": "%command.close%"
			},
			{
				"category": "Git",
				"command": "git.closeOtherRepositories",
				"enablement": "!operationInProgress",
				"title": "%command.closeOtherRepositories%"
			},
			{
				"category": "Git",
				"command": "git.refresh",
				"enablement": "!operationInProgress",
				"icon": "$(refresh)",
				"title": "%command.refresh%"
			},
			{
				"category": "Git",
				"command": "git.openChange",
				"icon": "$(compare-changes)",
				"title": "%command.openChange%"
			},
			{
				"category": "Git",
				"command": "git.openAllChanges",
				"title": "%command.openAllChanges%"
			},
			{
				"category": "Git",
				"command": "git.openFile",
				"icon": "$(go-to-file)",
				"title": "%command.openFile%"
			},
			{
				"category": "Git",
				"command": "git.openFile2",
				"icon": "$(go-to-file)",
				"title": "%command.openFile%"
			},
			{
				"category": "Git",
				"command": "git.openHEADFile",
				"title": "%command.openHEADFile%"
			},
			{
				"category": "Git",
				"command": "git.stage",
				"enablement": "!operationInProgress",
				"icon": "$(add)",
				"title": "%command.stage%"
			},
			{
				"category": "Git",
				"command": "git.stageAll",
				"enablement": "!operationInProgress && scmResourceGroupResourceCount > 0",
				"icon": "$(add)",
				"title": "%command.stageAll%"
			},
			{
				"category": "Git",
				"command": "git.stageAllTracked",
				"enablement": "!operationInProgress && scmResourceGroupResourceCount > 0",
				"icon": "$(add)",
				"title": "%command.stageAllTracked%"
			},
			{
				"category": "Git",
				"command": "git.stageAllUntracked",
				"enablement": "!operationInProgress",
				"icon": "$(add)",
				"title": "%command.stageAllUntracked%"
			},
			{
				"category": "Git",
				"command": "git.stageAllMerge",
				"enablement": "!operationInProgress",
				"icon": "$(add)",
				"title": "%command.stageAllMerge%"
			},
			{
				"category": "Git",
				"command": "git.stageSelectedRanges",
				"enablement": "!operationInProgress",
				"title": "%command.stageSelectedRanges%"
			},
			{
				"category": "Git",
				"command": "git.diff.stageHunk",
				"icon": "$(plus)",
				"title": "%command.stageBlock%"
			},
			{
				"category": "Git",
				"command": "git.diff.stageSelection",
				"icon": "$(plus)",
				"title": "%command.stageSelection%"
			},
			{
				"category": "Git",
				"command": "git.revertSelectedRanges",
				"enablement": "!operationInProgress",
				"title": "%command.revertSelectedRanges%"
			},
			{
				"category": "Git",
				"command": "git.stageChange",
				"enablement": "!operationInProgress",
				"icon": "$(add)",
				"title": "%command.stageChange%"
			},
			{
				"category": "Git",
				"command": "git.stageFile",
				"enablement": "!operationInProgress",
				"icon": "$(add)",
				"title": "%command.stage%"
			},
			{
				"category": "Git",
				"command": "git.revertChange",
				"enablement": "!operationInProgress",
				"icon": "$(discard)",
				"title": "%command.revertChange%"
			},
			{
				"category": "Git",
				"command": "git.unstage",
				"enablement": "!operationInProgress",
				"icon": "$(remove)",
				"title": "%command.unstage%"
			},
			{
				"category": "Git",
				"command": "git.unstageAll",
				"enablement": "!operationInProgress && scmResourceGroupResourceCount > 0",
				"icon": "$(remove)",
				"title": "%command.unstageAll%"
			},
			{
				"category": "Git",
				"command": "git.unstageSelectedRanges",
				"enablement": "!operationInProgress",
				"title": "%command.unstageSelectedRanges%"
			},
			{
				"category": "Git",
				"command": "git.unstageFile",
				"enablement": "!operationInProgress",
				"icon": "$(remove)",
				"title": "%command.unstage%"
			},
			{
				"category": "Git",
				"command": "git.clean",
				"enablement": "!operationInProgress",
				"icon": "$(discard)",
				"title": "%command.clean%"
			},
			{
				"category": "Git",
				"command": "git.cleanAll",
				"enablement": "!operationInProgress && scmResourceGroupResourceCount > 0",
				"icon": "$(discard)",
				"title": "%command.cleanAll%"
			},
			{
				"category": "Git",
				"command": "git.cleanAllTracked",
				"enablement": "!operationInProgress && scmResourceGroupResourceCount > 0",
				"icon": "$(discard)",
				"title": "%command.cleanAllTracked%"
			},
			{
				"category": "Git",
				"command": "git.cleanAllUntracked",
				"enablement": "!operationInProgress",
				"icon": "$(discard)",
				"title": "%command.cleanAllUntracked%"
			},
			{
				"category": "Git",
				"command": "git.rename",
				"enablement": "!operationInProgress",
				"icon": "$(discard)",
				"title": "%command.rename%"
			},
			{
				"category": "Git",
				"command": "git.commit",
				"enablement": "!operationInProgress",
				"icon": "$(check)",
				"title": "%command.commit%"
			},
			{
				"category": "Git",
				"command": "git.commitAmend",
				"enablement": "!operationInProgress",
				"icon": "$(check)",
				"title": "%command.commitAmend%"
			},
			{
				"category": "Git",
				"command": "git.commitSigned",
				"enablement": "!operationInProgress",
				"icon": "$(check)",
				"title": "%command.commitSigned%"
			},
			{
				"category": "Git",
				"command": "git.commitStaged",
				"enablement": "!operationInProgress",
				"title": "%command.commitStaged%"
			},
			{
				"category": "Git",
				"command": "git.commitEmpty",
				"enablement": "!operationInProgress",
				"title": "%command.commitEmpty%"
			},
			{
				"category": "Git",
				"command": "git.commitStagedSigned",
				"enablement": "!operationInProgress",
				"title": "%command.commitStagedSigned%"
			},
			{
				"category": "Git",
				"command": "git.commitStagedAmend",
				"enablement": "!operationInProgress",
				"title": "%command.commitStagedAmend%"
			},
			{
				"category": "Git",
				"command": "git.commitAll",
				"enablement": "!operationInProgress",
				"title": "%command.commitAll%"
			},
			{
				"category": "Git",
				"command": "git.commitAllSigned",
				"enablement": "!operationInProgress",
				"title": "%command.commitAllSigned%"
			},
			{
				"category": "Git",
				"command": "git.commitAllAmend",
				"enablement": "!operationInProgress",
				"title": "%command.commitAllAmend%"
			},
			{
				"category": "Git",
				"command": "git.commitNoVerify",
				"enablement": "!operationInProgress",
				"icon": "$(check)",
				"title": "%command.commitNoVerify%"
			},
			{
				"category": "Git",
				"command": "git.commitStagedNoVerify",
				"enablement": "!operationInProgress",
				"title": "%command.commitStagedNoVerify%"
			},
			{
				"category": "Git",
				"command": "git.commitEmptyNoVerify",
				"enablement": "!operationInProgress",
				"title": "%command.commitEmptyNoVerify%"
			},
			{
				"category": "Git",
				"command": "git.commitStagedSignedNoVerify",
				"enablement": "!operationInProgress",
				"title": "%command.commitStagedSignedNoVerify%"
			},
			{
				"category": "Git",
				"command": "git.commitAmendNoVerify",
				"enablement": "!operationInProgress",
				"title": "%command.commitAmendNoVerify%"
			},
			{
				"category": "Git",
				"command": "git.commitSignedNoVerify",
				"enablement": "!operationInProgress",
				"title": "%command.commitSignedNoVerify%"
			},
			{
				"category": "Git",
				"command": "git.commitStagedAmendNoVerify",
				"enablement": "!operationInProgress",
				"title": "%command.commitStagedAmendNoVerify%"
			},
			{
				"category": "Git",
				"command": "git.commitAllNoVerify",
				"enablement": "!operationInProgress",
				"title": "%command.commitAllNoVerify%"
			},
			{
				"category": "Git",
				"command": "git.commitAllSignedNoVerify",
				"enablement": "!operationInProgress",
				"title": "%command.commitAllSignedNoVerify%"
			},
			{
				"category": "Git",
				"command": "git.commitAllAmendNoVerify",
				"enablement": "!operationInProgress",
				"title": "%command.commitAllAmendNoVerify%"
			},
			{
				"category": "Git",
				"command": "git.commitMessageAccept",
				"icon": "$(check)",
				"title": "%command.commitMessageAccept%"
			},
			{
				"category": "Git",
				"command": "git.commitMessageDiscard",
				"icon": "$(discard)",
				"title": "%command.commitMessageDiscard%"
			},
			{
				"category": "Git",
				"command": "git.restoreCommitTemplate",
				"enablement": "!operationInProgress",
				"title": "%command.restoreCommitTemplate%"
			},
			{
				"category": "Git",
				"command": "git.undoCommit",
				"enablement": "!operationInProgress",
				"title": "%command.undoCommit%"
			},
			{
				"category": "Git",
				"command": "git.checkout",
				"enablement": "!operationInProgress",
				"title": "%command.checkout%"
			},
			{
				"category": "Git",
				"command": "git.checkoutDetached",
				"enablement": "!operationInProgress",
				"title": "%command.checkoutDetached%"
			},
			{
				"category": "Git",
				"command": "git.checkoutRef",
				"enablement": "!operationInProgress",
				"title": "%command.checkoutRef%"
			},
			{
				"category": "Git",
				"command": "git.checkoutRefDetached",
				"enablement": "!operationInProgress",
				"title": "%command.checkoutRefDetached%"
			},
			{
				"category": "Git",
				"command": "git.branch",
				"enablement": "!operationInProgress",
				"title": "%command.branch%"
			},
			{
				"category": "Git",
				"command": "git.branchFrom",
				"enablement": "!operationInProgress",
				"title": "%command.branchFrom%"
			},
			{
				"category": "Git",
				"command": "git.deleteBranch",
				"enablement": "!operationInProgress",
				"title": "%command.deleteBranch%"
			},
			{
				"category": "Git",
				"command": "git.renameBranch",
				"enablement": "!operationInProgress",
				"title": "%command.renameBranch%"
			},
			{
				"category": "Git",
				"command": "git.merge",
				"enablement": "!operationInProgress",
				"title": "%command.merge%"
			},
			{
				"category": "Git",
				"command": "git.mergeAbort",
				"enablement": "gitMergeInProgress",
				"title": "%command.mergeAbort%"
			},
			{
				"category": "Git",
				"command": "git.rebase",
				"enablement": "!operationInProgress",
				"title": "%command.rebase%"
			},
			{
				"category": "Git",
				"command": "git.createTag",
				"enablement": "!operationInProgress",
				"title": "%command.createTag%"
			},
			{
				"category": "Git",
				"command": "git.deleteTag",
				"enablement": "!operationInProgress",
				"title": "%command.deleteTag%"
			},
			{
				"category": "Git",
				"command": "git.deleteRemoteTag",
				"enablement": "!operationInProgress",
				"title": "%command.deleteRemoteTag%"
			},
			{
				"category": "Git",
				"command": "git.fetch",
				"enablement": "!operationInProgress",
				"title": "%command.fetch%"
			},
			{
				"category": "Git",
				"command": "git.fetchPrune",
				"enablement": "!operationInProgress",
				"title": "%command.fetchPrune%"
			},
			{
				"category": "Git",
				"command": "git.fetchAll",
				"enablement": "!operationInProgress",
				"icon": "$(git-fetch)",
				"title": "%command.fetchAll%"
			},
			{
				"category": "Git",
				"command": "git.fetchRef",
				"enablement": "!operationInProgress",
				"icon": "$(git-fetch)",
				"title": "%command.fetch%"
			},
			{
				"category": "Git",
				"command": "git.pull",
				"enablement": "!operationInProgress",
				"title": "%command.pull%"
			},
			{
				"category": "Git",
				"command": "git.pullRebase",
				"enablement": "!operationInProgress",
				"title": "%command.pullRebase%"
			},
			{
				"category": "Git",
				"command": "git.pullFrom",
				"enablement": "!operationInProgress",
				"title": "%command.pullFrom%"
			},
			{
				"category": "Git",
				"command": "git.pullRef",
				"enablement": "!operationInProgress && scmCurrentHistoryItemRefInFilter && scmCurrentHistoryItemRefHasRemote",
				"icon": "$(repo-pull)",
				"title": "%command.pull%"
			},
			{
				"category": "Git",
				"command": "git.push",
				"enablement": "!operationInProgress",
				"title": "%command.push%"
			},
			{
				"category": "Git",
				"command": "git.pushForce",
				"enablement": "!operationInProgress",
				"title": "%command.pushForce%"
			},
			{
				"category": "Git",
				"command": "git.pushTo",
				"enablement": "!operationInProgress",
				"title": "%command.pushTo%"
			},
			{
				"category": "Git",
				"command": "git.pushToForce",
				"enablement": "!operationInProgress",
				"title": "%command.pushToForce%"
			},
			{
				"category": "Git",
				"command": "git.pushTags",
				"enablement": "!operationInProgress",
				"title": "%command.pushTags%"
			},
			{
				"category": "Git",
				"command": "git.pushWithTags",
				"enablement": "!operationInProgress",
				"title": "%command.pushFollowTags%"
			},
			{
				"category": "Git",
				"command": "git.pushWithTagsForce",
				"enablement": "!operationInProgress",
				"title": "%command.pushFollowTagsForce%"
			},
			{
				"category": "Git",
				"command": "git.pushRef",
				"enablement": "!operationInProgress && scmCurrentHistoryItemRefInFilter && scmCurrentHistoryItemRefHasRemote",
				"icon": "$(repo-push)",
				"title": "%command.push%"
			},
			{
				"category": "Git",
				"command": "git.cherryPick",
				"enablement": "!operationInProgress",
				"title": "%command.cherryPick%"
			},
			{
				"category": "Git",
				"command": "git.cherryPickRef",
				"enablement": "!operationInProgress",
				"title": "%command.cherryPickRef%"
			},
			{
				"category": "Git",
				"command": "git.cherryPickAbort",
				"enablement": "!operationInProgress",
				"title": "%command.cherryPickAbort%"
			},
			{
				"category": "Git",
				"command": "git.addRemote",
				"enablement": "!operationInProgress",
				"title": "%command.addRemote%"
			},
			{
				"category": "Git",
				"command": "git.removeRemote",
				"enablement": "!operationInProgress",
				"title": "%command.removeRemote%"
			},
			{
				"category": "Git",
				"command": "git.sync",
				"enablement": "!operationInProgress",
				"title": "%command.sync%"
			},
			{
				"category": "Git",
				"command": "git.syncRebase",
				"enablement": "!operationInProgress",
				"title": "%command.syncRebase%"
			},
			{
				"category": "Git",
				"command": "git.publish",
				"enablement": "!operationInProgress",
				"icon": "$(cloud-upload)",
				"title": "%command.publish%"
			},
			{
				"category": "Git",
				"command": "git.showOutput",
				"title": "%command.showOutput%"
			},
			{
				"category": "Git",
				"command": "git.ignore",
				"enablement": "!operationInProgress",
				"title": "%command.ignore%"
			},
			{
				"category": "Git",
				"command": "git.revealInExplorer",
				"title": "%command.revealInExplorer%"
			},
			{
				"category": "Git",
				"command": "git.revealFileInOS.linux",
				"title": "%command.revealFileInOS.linux%"
			},
			{
				"category": "Git",
				"command": "git.revealFileInOS.mac",
				"title": "%command.revealFileInOS.mac%"
			},
			{
				"category": "Git",
				"command": "git.revealFileInOS.windows",
				"title": "%command.revealFileInOS.windows%"
			},
			{
				"category": "Git",
				"command": "git.stashIncludeUntracked",
				"enablement": "!operationInProgress",
				"title": "%command.stashIncludeUntracked%"
			},
			{
				"category": "Git",
				"command": "git.stash",
				"enablement": "!operationInProgress",
				"title": "%command.stash%"
			},
			{
				"category": "Git",
				"command": "git.stashStaged",
				"enablement": "!operationInProgress && gitVersion2.35",
				"title": "%command.stashStaged%"
			},
			{
				"category": "Git",
				"command": "git.stashPop",
				"enablement": "!operationInProgress",
				"title": "%command.stashPop%"
			},
			{
				"category": "Git",
				"command": "git.stashPopLatest",
				"enablement": "!operationInProgress",
				"title": "%command.stashPopLatest%"
			},
			{
				"category": "Git",
				"command": "git.stashPopEditor",
				"enablement": "!operationInProgress",
				"icon": "$(git-stash-pop)",
				"title": "%command.stashPopEditor%"
			},
			{
				"category": "Git",
				"command": "git.stashApply",
				"enablement": "!operationInProgress",
				"title": "%command.stashApply%"
			},
			{
				"category": "Git",
				"command": "git.stashApplyLatest",
				"enablement": "!operationInProgress",
				"title": "%command.stashApplyLatest%"
			},
			{
				"category": "Git",
				"command": "git.stashApplyEditor",
				"enablement": "!operationInProgress",
				"icon": "$(git-stash-apply)",
				"title": "%command.stashApplyEditor%"
			},
			{
				"category": "Git",
				"command": "git.stashDrop",
				"enablement": "!operationInProgress",
				"title": "%command.stashDrop%"
			},
			{
				"category": "Git",
				"command": "git.stashDropAll",
				"enablement": "!operationInProgress",
				"title": "%command.stashDropAll%"
			},
			{
				"category": "Git",
				"command": "git.stashDropEditor",
				"enablement": "!operationInProgress",
				"icon": "$(trash)",
				"title": "%command.stashDropEditor%"
			},
			{
				"category": "Git",
				"command": "git.stashView",
				"enablement": "!operationInProgress",
				"title": "%command.stashView%"
			},
			{
				"category": "Git",
				"command": "git.timeline.openDiff",
				"icon": "$(compare-changes)",
				"title": "%command.timelineOpenDiff%"
			},
			{
				"category": "Git",
				"command": "git.timeline.copyCommitId",
				"title": "%command.timelineCopyCommitId%"
			},
			{
				"category": "Git",
				"command": "git.timeline.copyCommitMessage",
				"title": "%command.timelineCopyCommitMessage%"
			},
			{
				"category": "Git",
				"command": "git.timeline.selectForCompare",
				"title": "%command.timelineSelectForCompare%"
			},
			{
				"category": "Git",
				"command": "git.timeline.compareWithSelected",
				"title": "%command.timelineCompareWithSelected%"
			},
			{
				"category": "Git",
				"command": "git.timeline.viewCommit",
				"icon": "$(diff-multiple)",
				"title": "%command.viewCommit%"
			},
			{
				"category": "Git",
				"command": "git.rebaseAbort",
				"enablement": "gitRebaseInProgress",
				"title": "%command.rebaseAbort%"
			},
			{
				"category": "Git",
				"command": "git.closeAllDiffEditors",
				"enablement": "!operationInProgress",
				"title": "%command.closeAllDiffEditors%"
			},
			{
				"category": "Git",
				"command": "git.closeAllUnmodifiedEditors",
				"enablement": "!operationInProgress",
				"title": "%command.closeAllUnmodifiedEditors%"
			},
			{
				"category": "Git API",
				"command": "git.api.getRepositories",
				"title": "%command.api.getRepositories%"
			},
			{
				"category": "Git API",
				"command": "git.api.getRepositoryState",
				"title": "%command.api.getRepositoryState%"
			},
			{
				"category": "Git API",
				"command": "git.api.getRemoteSources",
				"title": "%command.api.getRemoteSources%"
			},
			{
				"category": "Git",
				"command": "git.acceptMerge",
				"enablement": "isMergeEditor && mergeEditorResultUri in git.mergeChanges",
				"title": "%command.git.acceptMerge%"
			},
			{
				"category": "Git",
				"command": "git.openMergeEditor",
				"title": "%command.git.openMergeEditor%"
			},
			{
				"category": "Git",
				"command": "git.runGitMerge",
				"enablement": "isMergeEditor",
				"title": "%command.git.runGitMerge%"
			},
			{
				"category": "Git",
				"command": "git.runGitMergeDiff3",
				"enablement": "isMergeEditor",
				"title": "%command.git.runGitMergeDiff3%"
			},
			{
				"category": "Git",
				"command": "git.manageUnsafeRepositories",
				"title": "%command.manageUnsafeRepositories%"
			},
			{
				"category": "Git",
				"command": "git.openRepositoriesInParentFolders",
				"title": "%command.openRepositoriesInParentFolders%"
			},
			{
				"category": "Git",
				"command": "git.viewChanges",
				"enablement": "!operationInProgress && scmResourceGroupResourceCount > 0",
				"icon": "$(diff-multiple)",
				"title": "%command.viewChanges%"
			},
			{
				"category": "Git",
				"command": "git.viewStagedChanges",
				"enablement": "!operationInProgress && scmResourceGroupResourceCount > 0",
				"icon": "$(diff-multiple)",
				"title": "%command.viewStagedChanges%"
			},
			{
				"category": "Git",
				"command": "git.viewUntrackedChanges",
				"enablement": "!operationInProgress",
				"icon": "$(diff-multiple)",
				"title": "%command.viewUntrackedChanges%"
			},
			{
				"category": "Git",
				"command": "git.viewCommit",
				"enablement": "!operationInProgress",
				"icon": "$(diff-multiple)",
				"title": "%command.viewCommit%"
			},
			{
				"category": "Git",
				"command": "git.copyCommitId",
				"title": "%command.timelineCopyCommitId%"
			},
			{
				"category": "Git",
				"command": "git.copyCommitMessage",
				"title": "%command.timelineCopyCommitMessage%"
			}
		],
		"configuration": {
			"properties": {
				"git.allowForcePush": {
					"default": false,
					"description": "%config.allowForcePush%",
					"type": "boolean"
				},
				"git.allowNoVerifyCommit": {
					"default": false,
					"description": "%config.allowNoVerifyCommit%",
					"type": "boolean"
				},
				"git.alwaysShowStagedChangesResourceGroup": {
					"default": false,
					"description": "%config.alwaysShowStagedChangesResourceGroup%",
					"scope": "resource",
					"type": "boolean"
				},
				"git.alwaysSignOff": {
					"default": false,
					"description": "%config.alwaysSignOff%",
					"scope": "resource",
					"type": "boolean"
				},
				"git.autoRepositoryDetection": {
					"default": true,
					"description": "%config.autoRepositoryDetection%",
					"enum": [
						true,
						false,
						"subFolders",
						"openEditors"
					],
					"enumDescriptions": [
						"%config.autoRepositoryDetection.true%",
						"%config.autoRepositoryDetection.false%",
						"%config.autoRepositoryDetection.subFolders%",
						"%config.autoRepositoryDetection.openEditors%"
					],
					"type": [
						"boolean",
						"string"
					]
				},
				"git.autoStash": {
					"default": false,
					"description": "%config.autoStash%",
					"scope": "resource",
					"type": "boolean"
				},
				"git.autofetch": {
					"default": false,
					"enum": [
						true,
						false,
						"all"
					],
					"markdownDescription": "%config.autofetch%",
					"scope": "resource",
					"tags": [
						"usesOnlineServices"
					],
					"type": [
						"boolean",
						"string"
					]
				},
				"git.autofetchPeriod": {
					"default": 180,
					"markdownDescription": "%config.autofetchPeriod%",
					"scope": "resource",
					"type": "number"
				},
				"git.autorefresh": {
					"default": true,
					"description": "%config.autorefresh%",
					"type": "boolean"
				},
				"git.blame.editorDecoration.enabled": {
					"default": false,
					"markdownDescription": "%config.blameEditorDecoration.enabled%",
					"type": "boolean"
				},
				"git.blame.editorDecoration.template": {
					"default": "${subject}, ${authorName} (${authorDateAgo})",
					"markdownDescription": "%config.blameEditorDecoration.template%",
					"type": "string"
				},
				"git.blame.statusBarItem.enabled": {
					"default": false,
					"markdownDescription": "%config.blameStatusBarItem.enabled%",
					"type": "boolean"
				},
				"git.blame.statusBarItem.template": {
					"default": "${authorName} (${authorDateAgo})",
					"markdownDescription": "%config.blameStatusBarItem.template%",
					"type": "string"
				},
				"git.branchPrefix": {
					"default": "",
					"description": "%config.branchPrefix%",
					"scope": "resource",
					"type": "string"
				},
				"git.branchProtection": {
					"default": [],
					"items": {
						"type": "string"
					},
					"markdownDescription": "%config.branchProtection%",
					"scope": "resource",
					"type": "array"
				},
				"git.branchProtectionPrompt": {
					"default": "alwaysPrompt",
					"description": "%config.branchProtectionPrompt%",
					"enum": [
						"alwaysCommit",
						"alwaysCommitToNewBranch",
						"alwaysPrompt"
					],
					"enumDescriptions": [
						"%config.branchProtectionPrompt.alwaysCommit%",
						"%config.branchProtectionPrompt.alwaysCommitToNewBranch%",
						"%config.branchProtectionPrompt.alwaysPrompt%"
					],
					"scope": "resource",
					"type": "string"
				},
				"git.branchRandomName.dictionary": {
					"default": [
						"adjectives",
						"animals"
					],
					"items": {
						"enum": [
							"adjectives",
							"animals",
							"colors",
							"numbers"
						],
						"enumDescriptions": [
							"%config.branchRandomNameDictionary.adjectives%",
							"%config.branchRandomNameDictionary.animals%",
							"%config.branchRandomNameDictionary.colors%",
							"%config.branchRandomNameDictionary.numbers%"
						],
						"type": "string"
					},
					"markdownDescription": "%config.branchRandomNameDictionary%",
					"maxItems": 5,
					"minItems": 1,
					"scope": "resource",
					"type": "array"
				},
				"git.branchRandomName.enable": {
					"default": false,
					"description": "%config.branchRandomNameEnable%",
					"scope": "resource",
					"type": "boolean"
				},
				"git.branchSortOrder": {
					"default": "committerdate",
					"description": "%config.branchSortOrder%",
					"enum": [
						"committerdate",
						"alphabetically"
					],
					"type": "string"
				},
				"git.branchValidationRegex": {
					"default": "",
					"description": "%config.branchValidationRegex%",
					"type": "string"
				},
				"git.branchWhitespaceChar": {
					"default": "-",
					"description": "%config.branchWhitespaceChar%",
					"type": "string"
				},
				"git.checkoutType": {
					"default": [
						"local",
						"remote",
						"tags"
					],
					"items": {
						"enum": [
							"local",
							"tags",
							"remote"
						],
						"enumDescriptions": [
							"%config.checkoutType.local%",
							"%config.checkoutType.tags%",
							"%config.checkoutType.remote%"
						],
						"type": "string"
					},
					"markdownDescription": "%config.checkoutType%",
					"type": "array",
					"uniqueItems": true
				},
				"git.closeDiffOnOperation": {
					"default": false,
					"description": "%config.closeDiffOnOperation%",
					"scope": "resource",
					"type": "boolean"
				},
				"git.commandsToLog": {
					"default": [],
					"items": {
						"type": "string"
					},
					"markdownDescription": "%config.commandsToLog%",
					"type": "array"
				},
				"git.commitShortHashLength": {
					"default": 7,
					"markdownDescription": "%config.commitShortHashLength%",
					"maximum": 40,
					"minimum": 7,
					"scope": "resource",
					"type": "number"
				},
				"git.confirmEmptyCommits": {
					"default": true,
					"description": "%config.confirmEmptyCommits%",
					"scope": "resource",
					"type": "boolean"
				},
				"git.confirmForcePush": {
					"default": true,
					"description": "%config.confirmForcePush%",
					"type": "boolean"
				},
				"git.confirmNoVerifyCommit": {
					"default": true,
					"description": "%config.confirmNoVerifyCommit%",
					"type": "boolean"
				},
				"git.confirmSync": {
					"default": true,
					"description": "%config.confirmSync%",
					"type": "boolean"
				},
				"git.countBadge": {
					"default": "all",
					"description": "%config.countBadge%",
					"enum": [
						"all",
						"tracked",
						"off"
					],
					"enumDescriptions": [
						"%config.countBadge.all%",
						"%config.countBadge.tracked%",
						"%config.countBadge.off%"
					],
					"scope": "resource",
					"type": "string"
				},
				"git.decorations.enabled": {
					"default": true,
					"description": "%config.decorations.enabled%",
					"type": "boolean"
				},
				"git.defaultBranchName": {
					"default": "main",
					"markdownDescription": "%config.defaultBranchName%",
					"scope": "resource",
					"type": "string"
				},
				"git.defaultCloneDirectory": {
					"default": null,
					"description": "%config.defaultCloneDirectory%",
					"scope": "machine",
					"type": [
						"string",
						"null"
					]
				},
				"git.detectSubmodules": {
					"default": true,
					"description": "%config.detectSubmodules%",
					"scope": "resource",
					"type": "boolean"
				},
				"git.detectSubmodulesLimit": {
					"default": 10,
					"description": "%config.detectSubmodulesLimit%",
					"scope": "resource",
					"type": "number"
				},
				"git.enableCommitSigning": {
					"default": false,
					"description": "%config.enableCommitSigning%",
					"scope": "resource",
					"type": "boolean"
				},
				"git.enableSmartCommit": {
					"default": false,
					"description": "%config.enableSmartCommit%",
					"scope": "resource",
					"type": "boolean"
				},
				"git.enableStatusBarSync": {
					"default": true,
					"description": "%config.enableStatusBarSync%",
					"scope": "resource",
					"type": "boolean"
				},
				"git.enabled": {
					"default": true,
					"description": "%config.enabled%",
					"scope": "resource",
					"type": "boolean"
				},
				"git.fetchOnPull": {
					"default": false,
					"description": "%config.fetchOnPull%",
					"scope": "resource",
					"type": "boolean"
				},
				"git.followTagsWhenSync": {
					"default": false,
					"description": "%config.followTagsWhenSync%",
					"scope": "resource",
					"type": "boolean"
				},
				"git.githubAuthentication": {
					"markdownDeprecationMessage": "This setting is now deprecated, please use `#github.gitAuthentication#` instead."
				},
				"git.ignoreLegacyWarning": {
					"default": false,
					"description": "%config.ignoreLegacyWarning%",
					"type": "boolean"
				},
				"git.ignoreLimitWarning": {
					"default": false,
					"description": "%config.ignoreLimitWarning%",
					"type": "boolean"
				},
				"git.ignoreMissingGitWarning": {
					"default": false,
					"description": "%config.ignoreMissingGitWarning%",
					"type": "boolean"
				},
				"git.ignoreRebaseWarning": {
					"default": false,
					"description": "%config.ignoreRebaseWarning%",
					"type": "boolean"
				},
				"git.ignoreSubmodules": {
					"default": false,
					"description": "%config.ignoreSubmodules%",
					"scope": "resource",
					"type": "boolean"
				},
				"git.ignoreWindowsGit27Warning": {
					"default": false,
					"description": "%config.ignoreWindowsGit27Warning%",
					"type": "boolean"
				},
				"git.ignoredRepositories": {
					"default": [],
					"description": "%config.ignoredRepositories%",
					"items": {
						"type": "string"
					},
					"scope": "window",
					"type": "array"
				},
				"git.inputValidation": {
					"default": false,
					"description": "%config.inputValidation%",
					"type": "boolean"
				},
				"git.inputValidationLength": {
					"default": 72,
					"description": "%config.inputValidationLength%",
					"type": "number"
				},
				"git.inputValidationSubjectLength": {
					"default": 50,
					"markdownDescription": "%config.inputValidationSubjectLength%",
					"type": [
						"number",
						"null"
					]
				},
				"git.mergeEditor": {
					"default": false,
					"markdownDescription": "%config.mergeEditor%",
					"scope": "window",
					"type": "boolean"
				},
				"git.openAfterClone": {
					"default": "prompt",
					"description": "%config.openAfterClone%",
					"enum": [
						"always",
						"alwaysNewWindow",
						"whenNoFolderOpen",
						"prompt"
					],
					"enumDescriptions": [
						"%config.openAfterClone.always%",
						"%config.openAfterClone.alwaysNewWindow%",
						"%config.openAfterClone.whenNoFolderOpen%",
						"%config.openAfterClone.prompt%"
					],
					"type": "string"
				},
				"git.openDiffOnClick": {
					"default": true,
					"description": "%config.openDiffOnClick%",
					"scope": "resource",
					"type": "boolean"
				},
				"git.openRepositoryInParentFolders": {
					"default": "prompt",
					"enum": [
						"always",
						"never",
						"prompt"
					],
					"enumDescriptions": [
						"%config.openRepositoryInParentFolders.always%",
						"%config.openRepositoryInParentFolders.never%",
						"%config.openRepositoryInParentFolders.prompt%"
					],
					"markdownDescription": "%config.openRepositoryInParentFolders%",
					"scope": "resource",
					"type": "string"
				},
				"git.optimisticUpdate": {
					"default": true,
					"markdownDescription": "%config.optimisticUpdate%",
					"scope": "resource",
					"tags": [
						"experimental"
					],
					"type": "boolean"
				},
				"git.path": {
					"default": null,
					"markdownDescription": "%config.path%",
					"scope": "machine",
					"type": [
						"string",
						"null",
						"array"
					]
				},
				"git.postCommitCommand": {
					"default": "none",
					"enum": [
						"none",
						"push",
						"sync"
					],
					"enumDescriptions": [
						"%config.postCommitCommand.none%",
						"%config.postCommitCommand.push%",
						"%config.postCommitCommand.sync%"
					],
					"markdownDescription": "%config.postCommitCommand%",
					"scope": "resource",
					"type": "string"
				},
				"git.promptToSaveFilesBeforeCommit": {
					"default": "always",
					"description": "%config.promptToSaveFilesBeforeCommit%",
					"enum": [
						"always",
						"staged",
						"never"
					],
					"enumDescriptions": [
						"%config.promptToSaveFilesBeforeCommit.always%",
						"%config.promptToSaveFilesBeforeCommit.staged%",
						"%config.promptToSaveFilesBeforeCommit.never%"
					],
					"scope": "resource",
					"type": "string"
				},
				"git.promptToSaveFilesBeforeStash": {
					"default": "always",
					"description": "%config.promptToSaveFilesBeforeStash%",
					"enum": [
						"always",
						"staged",
						"never"
					],
					"enumDescriptions": [
						"%config.promptToSaveFilesBeforeStash.always%",
						"%config.promptToSaveFilesBeforeStash.staged%",
						"%config.promptToSaveFilesBeforeStash.never%"
					],
					"scope": "resource",
					"type": "string"
				},
				"git.pruneOnFetch": {
					"default": false,
					"description": "%config.pruneOnFetch%",
					"scope": "resource",
					"type": "boolean"
				},
				"git.pullBeforeCheckout": {
					"default": false,
					"description": "%config.pullBeforeCheckout%",
					"scope": "resource",
					"type": "boolean"
				},
				"git.pullTags": {
					"default": true,
					"description": "%config.pullTags%",
					"scope": "resource",
					"type": "boolean"
				},
				"git.rebaseWhenSync": {
					"default": false,
					"description": "%config.rebaseWhenSync%",
					"scope": "resource",
					"type": "boolean"
				},
				"git.rememberPostCommitCommand": {
					"default": false,
					"description": "%config.rememberPostCommitCommand%",
					"scope": "resource",
					"type": "boolean"
				},
				"git.replaceTagsWhenPull": {
					"default": false,
					"description": "%config.replaceTagsWhenPull%",
					"scope": "resource",
					"type": "boolean"
				},
				"git.repositoryScanIgnoredFolders": {
					"default": [
						"node_modules"
					],
					"items": {
						"type": "string"
					},
					"markdownDescription": "%config.repositoryScanIgnoredFolders%",
					"scope": "resource",
					"type": "array"
				},
				"git.repositoryScanMaxDepth": {
					"default": 1,
					"markdownDescription": "%config.repositoryScanMaxDepth%",
					"scope": "resource",
					"type": "number"
				},
				"git.requireGitUserConfig": {
					"default": true,
					"description": "%config.requireGitUserConfig%",
					"scope": "resource",
					"type": "boolean"
				},
				"git.scanRepositories": {
					"default": [],
					"description": "%config.scanRepositories%",
					"items": {
						"type": "string"
					},
					"scope": "resource",
					"type": "array"
				},
				"git.showActionButton": {
					"additionalProperties": false,
					"default": {
						"commit": true,
						"publish": true,
						"sync": true
					},
					"description": "%config.showActionButton%",
					"properties": {
						"commit": {
							"description": "%config.showActionButton.commit%",
							"type": "boolean"
						},
						"publish": {
							"description": "%config.showActionButton.publish%",
							"type": "boolean"
						},
						"sync": {
							"description": "%config.showActionButton.sync%",
							"type": "boolean"
						}
					},
					"scope": "resource",
					"type": "object"
				},
				"git.showCommitInput": {
					"default": true,
					"description": "%config.showCommitInput%",
					"scope": "resource",
					"type": "boolean"
				},
				"git.showInlineOpenFileAction": {
					"default": true,
					"description": "%config.showInlineOpenFileAction%",
					"type": "boolean"
				},
				"git.showProgress": {
					"default": true,
					"description": "%config.showProgress%",
					"scope": "resource",
					"type": "boolean"
				},
				"git.showPushSuccessNotification": {
					"default": false,
					"description": "%config.showPushSuccessNotification%",
					"type": "boolean"
				},
				"git.similarityThreshold": {
					"default": 50,
					"markdownDescription": "%config.similarityThreshold%",
					"maximum": 100,
					"minimum": 0,
					"scope": "resource",
					"type": "number"
				},
				"git.smartCommitChanges": {
					"default": "all",
					"description": "%config.smartCommitChanges%",
					"enum": [
						"all",
						"tracked"
					],
					"enumDescriptions": [
						"%config.smartCommitChanges.all%",
						"%config.smartCommitChanges.tracked%"
					],
					"scope": "resource",
					"type": "string"
				},
				"git.statusLimit": {
					"default": 10000,
					"description": "%config.statusLimit%",
					"scope": "resource",
					"type": "number"
				},
				"git.suggestSmartCommit": {
					"default": true,
					"description": "%config.suggestSmartCommit%",
					"scope": "resource",
					"type": "boolean"
				},
				"git.supportCancellation": {
					"default": false,
					"description": "%config.supportCancellation%",
					"scope": "resource",
					"type": "boolean"
				},
				"git.terminalAuthentication": {
					"default": true,
					"description": "%config.terminalAuthentication%",
					"type": "boolean"
				},
				"git.terminalGitEditor": {
					"default": false,
					"description": "%config.terminalGitEditor%",
					"type": "boolean"
				},
				"git.timeline.date": {
					"default": "committed",
					"description": "%config.timeline.date%",
					"enum": [
						"committed",
						"authored"
					],
					"enumDescriptions": [
						"%config.timeline.date.committed%",
						"%config.timeline.date.authored%"
					],
					"scope": "window",
					"type": "string"
				},
				"git.timeline.showAuthor": {
					"default": true,
					"description": "%config.timeline.showAuthor%",
					"scope": "window",
					"type": "boolean"
				},
				"git.timeline.showUncommitted": {
					"default": false,
					"description": "%config.timeline.showUncommitted%",
					"scope": "window",
					"type": "boolean"
				},
				"git.untrackedChanges": {
					"default": "mixed",
					"description": "%config.untrackedChanges%",
					"enum": [
						"mixed",
						"separate",
						"hidden"
					],
					"enumDescriptions": [
						"%config.untrackedChanges.mixed%",
						"%config.untrackedChanges.separate%",
						"%config.untrackedChanges.hidden%"
					],
					"scope": "resource",
					"type": "string"
				},
				"git.useCommitInputAsStashMessage": {
					"default": false,
					"description": "%config.useCommitInputAsStashMessage%",
					"scope": "resource",
					"type": "boolean"
				},
				"git.useEditorAsCommitInput": {
					"default": true,
					"description": "%config.useEditorAsCommitInput%",
					"type": "boolean"
				},
				"git.useForcePushIfIncludes": {
					"default": true,
					"markdownDescription": "%config.useForcePushIfIncludes%",
					"type": "boolean"
				},
				"git.useForcePushWithLease": {
					"default": true,
					"description": "%config.useForcePushWithLease%",
					"type": "boolean"
				},
				"git.useIntegratedAskPass": {
					"default": true,
					"description": "%config.useIntegratedAskPass%",
					"type": "boolean"
				},
				"git.verboseCommit": {
					"default": false,
					"markdownDescription": "%config.verboseCommit%",
					"scope": "resource",
					"type": "boolean"
				}
			},
			"title": "Git"
		},
		"configurationDefaults": {
			"[git-commit]": {
				"editor.rulers": [
					50,
					72
				],
				"editor.wordWrap": "off",
				"workbench.editor.restoreViewState": false
			},
			"[git-rebase]": {
				"workbench.editor.restoreViewState": false
			}
		},
		"continueEditSession": [
			{
				"command": "git.continueInLocalClone",
				"qualifiedName": "%command.continueInLocalClone.qualifiedName%",
				"remoteGroup": "remote_42_git_0_local@0",
				"when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && remoteName"
			}
		],
		"keybindings": [
			{
				"command": "git.stageSelectedRanges",
				"key": "ctrl+k ctrl+alt+s",
				"mac": "cmd+k cmd+alt+s",
				"when": "editorTextFocus && resourceScheme == file"
			},
			{
				"command": "git.unstageSelectedRanges",
				"key": "ctrl+k ctrl+n",
				"mac": "cmd+k cmd+n",
				"when": "editorTextFocus && isInDiffEditor && isInDiffRightEditor && resourceScheme == git"
			},
			{
				"command": "git.revertSelectedRanges",
				"key": "ctrl+k ctrl+r",
				"mac": "cmd+k cmd+r",
				"when": "editorTextFocus && resourceScheme == file"
			}
		],
		"menus": {
			"commandPalette": [
				{
					"command": "git.continueInLocalClone",
					"when": "false"
				},
				{
					"command": "git.clone",
					"when": "config.git.enabled && !git.missing"
				},
				{
					"command": "git.cloneRecursive",
					"when": "config.git.enabled && !git.missing"
				},
				{
					"command": "git.init",
					"when": "config.git.enabled && !git.missing && remoteName != 'codespaces'"
				},
				{
					"command": "git.openRepository",
					"when": "config.git.enabled && !git.missing"
				},
				{
					"command": "git.close",
					"when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
				},
				{
					"command": "git.closeOtherRepositories",
					"when": "config.git.enabled && !git.missing && gitOpenRepositoryCount > 1"
				},
				{
					"command": "git.refresh",
					"when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
				},
				{
					"command": "git.openFile",
					"when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && resourceScheme == file && scmActiveResourceHasChanges"
				},
				{
					"command": "git.openHEADFile",
					"when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && resourceScheme == file && scmActiveResourceHasChanges"
				},
				{
					"command": "git.openChange",
					"when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
				},
				{
					"command": "git.stage",
					"when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
				},
				{
					"command": "git.stageAll",
					"when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
				},
				{
					"command": "git.stageAllTracked",
					"when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
				},
				{
					"command": "git.stageAllUntracked",
					"when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
				},
				{
					"command": "git.stageAllMerge",
					"when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
				},
				{
					"command": "git.stageSelectedRanges",
					"when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && resourceScheme == file"
				},
				{
					"command": "git.stageChange",
					"when": "false"
				},
				{
					"command": "git.revertSelectedRanges",
					"when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && resourceScheme == file"
				},
				{
					"command": "git.revertChange",
					"when": "false"
				},
				{
					"command": "git.openFile2",
					"when": "false"
				},
				{
					"command": "git.unstage",
					"when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
				},
				{
					"command": "git.unstageAll",
					"when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
				},
				{
					"command": "git.unstageSelectedRanges",
					"when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && resourceScheme == git"
				},
				{
					"command": "git.clean",
					"when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
				},
				{
					"command": "git.cleanAll",
					"when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
				},
				{
					"command": "git.cleanAllTracked",
					"when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
				},
				{
					"command": "git.cleanAllUntracked",
					"when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
				},
				{
					"command": "git.rename",
					"when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && resourceScheme == file && scmActiveResourceRepository"
				},
				{
					"command": "git.commit",
					"when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
				},
				{
					"command": "git.commitAmend",
					"when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
				},
				{
					"command": "git.commitSigned",
					"when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
				},
				{
					"command": "git.commitStaged",
					"when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
				},
				{
					"command": "git.commitEmpty",
					"when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
				},
				{
					"command": "git.commitStagedSigned",
					"when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
				},
				{
					"command": "git.commitStagedAmend",
					"when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
				},
				{
					"command": "git.commitAll",
					"when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
				},
				{
					"command": "git.commitAllSigned",
					"when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
				},
				{
					"command": "git.commitAllAmend",
					"when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
				},
				{
					"command": "git.rebaseAbort",
					"when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && gitRebaseInProgress"
				},
				{
					"command": "git.commitNoVerify",
					"when": "config.git.enabled && !git.missing && config.git.allowNoVerifyCommit && gitOpenRepositoryCount != 0"
				},
				{
					"command": "git.commitStagedNoVerify",
					"when": "config.git.enabled && !git.missing && config.git.allowNoVerifyCommit && gitOpenRepositoryCount != 0"
				},
				{
					"command": "git.commitEmptyNoVerify",
					"when": "config.git.enabled && !git.missing && config.git.allowNoVerifyCommit && gitOpenRepositoryCount != 0"
				},
				{
					"command": "git.commitStagedSignedNoVerify",
					"when": "config.git.enabled && !git.missing && config.git.allowNoVerifyCommit && gitOpenRepositoryCount != 0"
				},
				{
					"command": "git.commitAmendNoVerify",
					"when": "config.git.enabled && !git.missing && config.git.allowNoVerifyCommit && gitOpenRepositoryCount != 0"
				},
				{
					"command": "git.commitSignedNoVerify",
					"when": "config.git.enabled && !git.missing && config.git.allowNoVerifyCommit && gitOpenRepositoryCount != 0"
				},
				{
					"command": "git.commitStagedAmendNoVerify",
					"when": "config.git.enabled && !git.missing && config.git.allowNoVerifyCommit && gitOpenRepositoryCount != 0"
				},
				{
					"command": "git.commitAllNoVerify",
					"when": "config.git.enabled && !git.missing && config.git.allowNoVerifyCommit && gitOpenRepositoryCount != 0"
				},
				{
					"command": "git.commitAllSignedNoVerify",
					"when": "config.git.enabled && !git.missing && config.git.allowNoVerifyCommit && gitOpenRepositoryCount != 0"
				},
				{
					"command": "git.commitAllAmendNoVerify",
					"when": "config.git.enabled && !git.missing && config.git.allowNoVerifyCommit && gitOpenRepositoryCount != 0"
				},
				{
					"command": "git.restoreCommitTemplate",
					"when": "false"
				},
				{
					"command": "git.commitMessageAccept",
					"when": "false"
				},
				{
					"command": "git.commitMessageDiscard",
					"when": "false"
				},
				{
					"command": "git.revealInExplorer",
					"when": "false"
				},
				{
					"command": "git.revealFileInOS.linux",
					"when": "false"
				},
				{
					"command": "git.revealFileInOS.mac",
					"when": "false"
				},
				{
					"command": "git.revealFileInOS.windows",
					"when": "false"
				},
				{
					"command": "git.undoCommit",
					"when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
				},
				{
					"command": "git.checkout",
					"when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
				},
				{
					"command": "git.branch",
					"when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
				},
				{
					"command": "git.branchFrom",
					"when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
				},
				{
					"command": "git.deleteBranch",
					"when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
				},
				{
					"command": "git.renameBranch",
					"when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
				},
				{
					"command": "git.cherryPick",
					"when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
				},
				{
					"command": "git.cherryPickAbort",
					"when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && gitCherryPickInProgress"
				},
				{
					"command": "git.pull",
					"when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
				},
				{
					"command": "git.pullFrom",
					"when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
				},
				{
					"command": "git.pullRebase",
					"when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
				},
				{
					"command": "git.merge",
					"when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
				},
				{
					"command": "git.mergeAbort",
					"when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && gitMergeInProgress"
				},
				{
					"command": "git.rebase",
					"when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
				},
				{
					"command": "git.createTag",
					"when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
				},
				{
					"command": "git.deleteTag",
					"when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
				},
				{
					"command": "git.deleteRemoteTag",
					"when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
				},
				{
					"command": "git.fetch",
					"when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
				},
				{
					"command": "git.fetchPrune",
					"when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
				},
				{
					"command": "git.fetchAll",
					"when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
				},
				{
					"command": "git.push",
					"when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
				},
				{
					"command": "git.pushForce",
					"when": "config.git.enabled && !git.missing && config.git.allowForcePush && gitOpenRepositoryCount != 0"
				},
				{
					"command": "git.pushTo",
					"when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
				},
				{
					"command": "git.pushToForce",
					"when": "config.git.enabled && !git.missing && config.git.allowForcePush && gitOpenRepositoryCount != 0"
				},
				{
					"command": "git.pushWithTags",
					"when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
				},
				{
					"command": "git.pushWithTagsForce",
					"when": "config.git.enabled && !git.missing && config.git.allowForcePush && gitOpenRepositoryCount != 0"
				},
				{
					"command": "git.pushTags",
					"when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
				},
				{
					"command": "git.addRemote",
					"when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
				},
				{
					"command": "git.removeRemote",
					"when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
				},
				{
					"command": "git.sync",
					"when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
				},
				{
					"command": "git.syncRebase",
					"when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
				},
				{
					"command": "git.publish",
					"when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
				},
				{
					"command": "git.showOutput",
					"when": "config.git.enabled"
				},
				{
					"command": "git.ignore",
					"when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && resourceScheme == file && scmActiveResourceRepository"
				},
				{
					"command": "git.stashIncludeUntracked",
					"when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
				},
				{
					"command": "git.stash",
					"when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
				},
				{
					"command": "git.stashStaged",
					"when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && gitVersion2.35"
				},
				{
					"command": "git.stashPop",
					"when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
				},
				{
					"command": "git.stashPopLatest",
					"when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
				},
				{
					"command": "git.stashPopEditor",
					"when": "false"
				},
				{
					"command": "git.stashApply",
					"when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
				},
				{
					"command": "git.stashApplyLatest",
					"when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
				},
				{
					"command": "git.stashApplyEditor",
					"when": "false"
				},
				{
					"command": "git.stashDrop",
					"when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
				},
				{
					"command": "git.stashDropAll",
					"when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
				},
				{
					"command": "git.stashDropEditor",
					"when": "false"
				},
				{
					"command": "git.timeline.openDiff",
					"when": "false"
				},
				{
					"command": "git.timeline.copyCommitId",
					"when": "false"
				},
				{
					"command": "git.timeline.copyCommitMessage",
					"when": "false"
				},
				{
					"command": "git.timeline.selectForCompare",
					"when": "false"
				},
				{
					"command": "git.timeline.compareWithSelected",
					"when": "false"
				},
				{
					"command": "git.timeline.viewCommit",
					"when": "false"
				},
				{
					"command": "git.closeAllDiffEditors",
					"when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
				},
				{
					"command": "git.api.getRepositories",
					"when": "false"
				},
				{
					"command": "git.api.getRepositoryState",
					"when": "false"
				},
				{
					"command": "git.api.getRemoteSources",
					"when": "false"
				},
				{
					"command": "git.openMergeEditor",
					"when": "false"
				},
				{
					"command": "git.manageUnsafeRepositories",
					"when": "config.git.enabled && !git.missing && git.unsafeRepositoryCount != 0"
				},
				{
					"command": "git.openRepositoriesInParentFolders",
					"when": "config.git.enabled && !git.missing && git.parentRepositoryCount != 0"
				},
				{
					"command": "git.stashView",
					"when": "config.git.enabled && !git.missing && config.multiDiffEditor.experimental.enabled"
				},
				{
					"command": "git.viewChanges",
					"when": "config.git.enabled && !git.missing && config.multiDiffEditor.experimental.enabled"
				},
				{
					"command": "git.viewStagedChanges",
					"when": "config.git.enabled && !git.missing && config.multiDiffEditor.experimental.enabled"
				},
				{
					"command": "git.viewUntrackedChanges",
					"when": "config.git.enabled && !git.missing && config.multiDiffEditor.experimental.enabled && config.git.untrackedChanges == separate"
				},
				{
					"command": "git.viewCommit",
					"when": "false"
				},
				{
					"command": "git.stageFile",
					"when": "false"
				},
				{
					"command": "git.unstageFile",
					"when": "false"
				},
				{
					"command": "git.fetchRef",
					"when": "false"
				},
				{
					"command": "git.pullRef",
					"when": "false"
				},
				{
					"command": "git.pushRef",
					"when": "false"
				},
				{
					"command": "git.copyCommitId",
					"when": "false"
				},
				{
					"command": "git.copyCommitMessage",
					"when": "false"
				},
				{
					"command": "git.checkoutRef",
					"when": "false"
				},
				{
					"command": "git.checkoutRefDetached",
					"when": "false"
				},
				{
					"command": "git.cherryPickRef",
					"when": "false"
				},
				{
					"command": "git.diff.stageHunk",
					"when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && diffEditorOriginalUri =~ /^git\\:.*%22ref%22%3A%22~%22%7D$/"
				},
				{
					"command": "git.diff.stageSelection",
					"when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && diffEditorOriginalUri =~ /^git\\:.*%22ref%22%3A%22~%22%7D$/"
				}
			],
			"diffEditor/gutter/hunk": [
				{
					"command": "git.diff.stageHunk",
					"group": "primary@10",
					"when": "diffEditorOriginalUri =~ /^git\\:.*%22ref%22%3A%22~%22%7D$/"
				}
			],
			"diffEditor/gutter/selection": [
				{
					"command": "git.diff.stageSelection",
					"group": "primary@10",
					"when": "diffEditorOriginalUri =~ /^git\\:.*%22ref%22%3A%22~%22%7D$/"
				}
			],
			"editor/content": [
				{
					"command": "git.acceptMerge",
					"when": "isMergeResultEditor && mergeEditorBaseUri =~ /^(git|file):/ && mergeEditorResultUri in git.mergeChanges"
				},
				{
					"command": "git.openMergeEditor",
					"group": "navigation@-10",
					"when": "config.git.enabled && !git.missing && !isInDiffEditor && !isMergeEditor && resource in git.mergeChanges"
				}
			],
			"editor/context": [
				{
					"command": "git.stageSelectedRanges",
					"group": "2_git@1",
					"when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && isInDiffEditor && isInDiffRightEditor && !isEmbeddedDiffEditor && resourceScheme == file"
				},
				{
					"command": "git.unstageSelectedRanges",
					"group": "2_git@2",
					"when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && isInDiffEditor && isInDiffRightEditor && !isEmbeddedDiffEditor && resourceScheme == git"
				},
				{
					"command": "git.revertSelectedRanges",
					"group": "2_git@3",
					"when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && isInDiffEditor && isInDiffRightEditor && !isEmbeddedDiffEditor && resourceScheme == file"
				}
			],
			"editor/title": [
				{
					"command": "git.openFile",
					"group": "navigation",
					"when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && isInDiffEditor && resourceScheme =~ /^git$|^file$/"
				},
				{
					"command": "git.openFile",
					"group": "navigation",
					"when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && isInNotebookTextDiffEditor && resourceScheme =~ /^git$|^file$/"
				},
				{
					"command": "git.stage",
					"group": "navigation@1",
					"when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && !isInDiffEditor && !isMergeEditor && resourceScheme == file && git.activeResourceHasUnstagedChanges"
				},
				{
					"command": "git.unstage",
					"group": "navigation@1",
					"when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && !isInDiffEditor && !isMergeEditor && resourceScheme == file && git.activeResourceHasStagedChanges"
				},
				{
					"command": "git.openChange",
					"group": "navigation@2",
					"when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && !isInDiffEditor && !isMergeEditor && resourceScheme == file && scmActiveResourceHasChanges"
				},
				{
					"command": "git.commitMessageAccept",
					"group": "navigation",
					"when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && editorLangId == git-commit"
				},
				{
					"command": "git.commitMessageDiscard",
					"group": "navigation",
					"when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && editorLangId == git-commit"
				},
				{
					"command": "git.stageSelectedRanges",
					"group": "2_git@1",
					"when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && isInDiffEditor && isInDiffRightEditor && !isEmbeddedDiffEditor && resourceScheme == file"
				},
				{
					"command": "git.unstageSelectedRanges",
					"group": "2_git@2",
					"when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && isInDiffEditor && isInDiffRightEditor && !isEmbeddedDiffEditor && resourceScheme == git"
				},
				{
					"command": "git.revertSelectedRanges",
					"group": "2_git@3",
					"when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && isInDiffEditor && isInDiffRightEditor && !isEmbeddedDiffEditor && resourceScheme == file"
				},
				{
					"alt": "git.stashPopEditor",
					"command": "git.stashApplyEditor",
					"group": "navigation@1",
					"when": "config.git.enabled && !git.missing && resourceScheme == git-stash"
				},
				{
					"command": "git.stashDropEditor",
					"group": "navigation@2",
					"when": "config.git.enabled && !git.missing && resourceScheme == git-stash"
				}
			],
			"git.branch": [
				{
					"command": "git.merge",
					"group": "1_merge@1"
				},
				{
					"command": "git.rebase",
					"group": "1_merge@2"
				},
				{
					"command": "git.branch",
					"group": "2_branch@1"
				},
				{
					"command": "git.branchFrom",
					"group": "2_branch@2"
				},
				{
					"command": "git.renameBranch",
					"group": "3_modify@1"
				},
				{
					"command": "git.deleteBranch",
					"group": "3_modify@2"
				},
				{
					"command": "git.publish",
					"group": "4_publish@1"
				}
			],
			"git.changes": [
				{
					"command": "git.stageAll",
					"group": "changes@1"
				},
				{
					"command": "git.unstageAll",
					"group": "changes@2"
				},
				{
					"command": "git.cleanAll",
					"group": "changes@3"
				}
			],
			"git.commit": [
				{
					"command": "git.commit",
					"group": "1_commit@1"
				},
				{
					"command": "git.commitStaged",
					"group": "1_commit@2"
				},
				{
					"command": "git.commitAll",
					"group": "1_commit@3"
				},
				{
					"command": "git.undoCommit",
					"group": "1_commit@4"
				},
				{
					"command": "git.rebaseAbort",
					"group": "1_commit@5"
				},
				{
					"command": "git.commitNoVerify",
					"group": "2_commit_noverify@1",
					"when": "config.git.allowNoVerifyCommit"
				},
				{
					"command": "git.commitStagedNoVerify",
					"group": "2_commit_noverify@2",
					"when": "config.git.allowNoVerifyCommit"
				},
				{
					"command": "git.commitAllNoVerify",
					"group": "2_commit_noverify@3",
					"when": "config.git.allowNoVerifyCommit"
				},
				{
					"command": "git.commitAmend",
					"group": "3_amend@1"
				},
				{
					"command": "git.commitStagedAmend",
					"group": "3_amend@2"
				},
				{
					"command": "git.commitAllAmend",
					"group": "3_amend@3"
				},
				{
					"command": "git.commitAmendNoVerify",
					"group": "4_amend_noverify@1",
					"when": "config.git.allowNoVerifyCommit"
				},
				{
					"command": "git.commitStagedAmendNoVerify",
					"group": "4_amend_noverify@2",
					"when": "config.git.allowNoVerifyCommit"
				},
				{
					"command": "git.commitAllAmendNoVerify",
					"group": "4_amend_noverify@3",
					"when": "config.git.allowNoVerifyCommit"
				},
				{
					"command": "git.commitSigned",
					"group": "5_signoff@1"
				},
				{
					"command": "git.commitStagedSigned",
					"group": "5_signoff@2"
				},
				{
					"command": "git.commitAllSigned",
					"group": "5_signoff@3"
				},
				{
					"command": "git.commitSignedNoVerify",
					"group": "6_signoff_noverify@1",
					"when": "config.git.allowNoVerifyCommit"
				},
				{
					"command": "git.commitStagedSignedNoVerify",
					"group": "6_signoff_noverify@2",
					"when": "config.git.allowNoVerifyCommit"
				},
				{
					"command": "git.commitAllSignedNoVerify",
					"group": "6_signoff_noverify@3",
					"when": "config.git.allowNoVerifyCommit"
				}
			],
			"git.pullpush": [
				{
					"command": "git.sync",
					"group": "1_sync@1"
				},
				{
					"command": "git.syncRebase",
					"group": "1_sync@2",
					"when": "gitState == idle"
				},
				{
					"command": "git.pull",
					"group": "2_pull@1"
				},
				{
					"command": "git.pullRebase",
					"group": "2_pull@2"
				},
				{
					"command": "git.pullFrom",
					"group": "2_pull@3"
				},
				{
					"command": "git.push",
					"group": "3_push@1"
				},
				{
					"command": "git.pushForce",
					"group": "3_push@2",
					"when": "config.git.allowForcePush"
				},
				{
					"command": "git.pushTo",
					"group": "3_push@3"
				},
				{
					"command": "git.pushToForce",
					"group": "3_push@4",
					"when": "config.git.allowForcePush"
				},
				{
					"command": "git.fetch",
					"group": "4_fetch@1"
				},
				{
					"command": "git.fetchPrune",
					"group": "4_fetch@2"
				},
				{
					"command": "git.fetchAll",
					"group": "4_fetch@3"
				}
			],
			"git.remotes": [
				{
					"command": "git.addRemote",
					"group": "remote@1"
				},
				{
					"command": "git.removeRemote",
					"group": "remote@2"
				}
			],
			"git.stash": [
				{
					"command": "git.stash",
					"group": "1_stash@1"
				},
				{
					"command": "git.stashIncludeUntracked",
					"group": "1_stash@2"
				},
				{
					"command": "git.stashStaged",
					"group": "1_stash@3",
					"when": "gitVersion2.35"
				},
				{
					"command": "git.stashApplyLatest",
					"group": "2_apply@1"
				},
				{
					"command": "git.stashApply",
					"group": "2_apply@2"
				},
				{
					"command": "git.stashPopLatest",
					"group": "3_pop@1"
				},
				{
					"command": "git.stashPop",
					"group": "3_pop@2"
				},
				{
					"command": "git.stashDrop",
					"group": "4_drop@1"
				},
				{
					"command": "git.stashDropAll",
					"group": "4_drop@2"
				},
				{
					"command": "git.stashView",
					"group": "5_preview@1",
					"when": "config.multiDiffEditor.experimental.enabled"
				}
			],
			"git.tags": [
				{
					"command": "git.createTag",
					"group": "tags@1"
				},
				{
					"command": "git.deleteTag",
					"group": "tags@2"
				},
				{
					"command": "git.deleteRemoteTag",
					"group": "tags@3"
				}
			],
			"multiDiffEditor/resource/title": [
				{
					"command": "git.stageFile",
					"group": "navigation",
					"when": "scmProvider == git && scmResourceGroup == workingTree"
				},
				{
					"command": "git.stageFile",
					"group": "navigation",
					"when": "scmProvider == git && scmResourceGroup == untracked"
				},
				{
					"command": "git.unstageFile",
					"group": "navigation",
					"when": "scmProvider == git && scmResourceGroup == index"
				}
			],
			"scm/change/title": [
				{
					"command": "git.stageChange",
					"when": "config.git.enabled && !git.missing && originalResourceScheme == git"
				},
				{
					"command": "git.revertChange",
					"when": "config.git.enabled && !git.missing && originalResourceScheme == git"
				}
			],
			"scm/history/title": [
				{
					"command": "git.fetchAll",
					"group": "navigation@900",
					"when": "scmProvider == git"
				},
				{
					"command": "git.pullRef",
					"group": "navigation@901",
					"when": "scmProvider == git"
				},
				{
					"command": "git.pushRef",
					"group": "navigation@902",
					"when": "scmProvider == git && scmCurrentHistoryItemRefHasRemote"
				},
				{
					"command": "git.publish",
					"group": "navigation@903",
					"when": "scmProvider == git && !scmCurrentHistoryItemRefHasRemote"
				}
			],
			"scm/historyItem/context": [
				{
					"command": "git.checkoutRefDetached",
					"group": "1_checkout@2",
					"when": "scmProvider == git"
				},
				{
					"command": "git.createTag",
					"group": "2_create@1",
					"when": "scmProvider == git"
				},
				{
					"command": "git.branch",
					"group": "2_create@2",
					"when": "scmProvider == git"
				},
				{
					"command": "git.cherryPickRef",
					"group": "3_modify@1",
					"when": "scmProvider == git"
				},
				{
					"command": "git.copyCommitId",
					"group": "9_copy@1",
					"when": "scmProvider == git && !listMultiSelection"
				},
				{
					"command": "git.copyCommitMessage",
					"group": "9_copy@2",
					"when": "scmProvider == git && !listMultiSelection"
				}
			],
			"scm/historyItemRef/context": [
				{
					"command": "git.checkoutRef",
					"group": "1_checkout@1",
					"when": "scmProvider == git"
				}
			],
			"scm/resourceFolder/context": [
				{
					"command": "git.stage",
					"group": "1_modification",
					"when": "scmProvider == git && scmResourceGroup == merge"
				},
				{
					"command": "git.stage",
					"group": "inline@2",
					"when": "scmProvider == git && scmResourceGroup == merge"
				},
				{
					"command": "git.unstage",
					"group": "1_modification",
					"when": "scmProvider == git && scmResourceGroup == index"
				},
				{
					"command": "git.unstage",
					"group": "inline@2",
					"when": "scmProvider == git && scmResourceGroup == index"
				},
				{
					"command": "git.stage",
					"group": "1_modification",
					"when": "scmProvider == git && scmResourceGroup == workingTree"
				},
				{
					"command": "git.clean",
					"group": "1_modification",
					"when": "scmProvider == git && scmResourceGroup == workingTree"
				},
				{
					"command": "git.clean",
					"group": "inline@2",
					"when": "scmProvider == git && scmResourceGroup == workingTree"
				},
				{
					"command": "git.stage",
					"group": "inline@2",
					"when": "scmProvider == git && scmResourceGroup == workingTree"
				},
				{
					"command": "git.ignore",
					"group": "1_modification@3",
					"when": "scmProvider == git && scmResourceGroup == workingTree"
				},
				{
					"command": "git.stage",
					"group": "1_modification",
					"when": "scmProvider == git && scmResourceGroup == untracked"
				},
				{
					"command": "git.stage",
					"group": "inline@2",
					"when": "scmProvider == git && scmResourceGroup == untracked"
				},
				{
					"command": "git.clean",
					"group": "1_modification",
					"when": "scmProvider == git && scmResourceGroup == untracked"
				},
				{
					"command": "git.clean",
					"group": "inline@2",
					"when": "scmProvider == git && scmResourceGroup == untracked"
				},
				{
					"command": "git.ignore",
					"group": "1_modification@3",
					"when": "scmProvider == git && scmResourceGroup == untracked"
				}
			],
			"scm/resourceGroup/context": [
				{
					"command": "git.stageAllMerge",
					"group": "1_modification",
					"when": "scmProvider == git && scmResourceGroup == merge"
				},
				{
					"command": "git.stageAllMerge",
					"group": "inline@2",
					"when": "scmProvider == git && scmResourceGroup == merge"
				},
				{
					"command": "git.unstageAll",
					"group": "1_modification",
					"when": "scmProvider == git && scmResourceGroup == index"
				},
				{
					"command": "git.unstageAll",
					"group": "inline@2",
					"when": "scmProvider == git && scmResourceGroup == index"
				},
				{
					"command": "git.viewStagedChanges",
					"group": "inline@1",
					"when": "scmProvider == git && scmResourceGroup == index && config.multiDiffEditor.experimental.enabled"
				},
				{
					"command": "git.viewChanges",
					"group": "inline@1",
					"when": "scmProvider == git && scmResourceGroup == workingTree && config.multiDiffEditor.experimental.enabled"
				},
				{
					"command": "git.cleanAll",
					"group": "1_modification",
					"when": "scmProvider == git && scmResourceGroup == workingTree && config.git.untrackedChanges == mixed"
				},
				{
					"command": "git.stageAll",
					"group": "1_modification",
					"when": "scmProvider == git && scmResourceGroup == workingTree && config.git.untrackedChanges == mixed"
				},
				{
					"command": "git.cleanAll",
					"group": "inline@2",
					"when": "scmProvider == git && scmResourceGroup == workingTree && config.git.untrackedChanges == mixed"
				},
				{
					"command": "git.stageAll",
					"group": "inline@2",
					"when": "scmProvider == git && scmResourceGroup == workingTree && config.git.untrackedChanges == mixed"
				},
				{
					"command": "git.cleanAllTracked",
					"group": "1_modification",
					"when": "scmProvider == git && scmResourceGroup == workingTree && config.git.untrackedChanges != mixed"
				},
				{
					"command": "git.stageAllTracked",
					"group": "1_modification",
					"when": "scmProvider == git && scmResourceGroup == workingTree && config.git.untrackedChanges != mixed"
				},
				{
					"command": "git.cleanAllTracked",
					"group": "inline@2",
					"when": "scmProvider == git && scmResourceGroup == workingTree && config.git.untrackedChanges != mixed"
				},
				{
					"command": "git.stageAllTracked",
					"group": "inline@2",
					"when": "scmProvider == git && scmResourceGroup == workingTree && config.git.untrackedChanges != mixed"
				},
				{
					"command": "git.cleanAllUntracked",
					"group": "1_modification",
					"when": "scmProvider == git && scmResourceGroup == untracked"
				},
				{
					"command": "git.stageAllUntracked",
					"group": "1_modification",
					"when": "scmProvider == git && scmResourceGroup == untracked"
				},
				{
					"command": "git.viewUntrackedChanges",
					"group": "inline@1",
					"when": "scmProvider == git && scmResourceGroup == untracked && config.multiDiffEditor.experimental.enabled"
				},
				{
					"command": "git.cleanAllUntracked",
					"group": "inline@2",
					"when": "scmProvider == git && scmResourceGroup == untracked"
				},
				{
					"command": "git.stageAllUntracked",
					"group": "inline@2",
					"when": "scmProvider == git && scmResourceGroup == untracked"
				}
			],
			"scm/resourceState/context": [
				{
					"command": "git.stage",
					"group": "1_modification",
					"when": "scmProvider == git && scmResourceGroup == merge"
				},
				{
					"command": "git.openFile",
					"group": "navigation",
					"when": "scmProvider == git && scmResourceGroup == merge"
				},
				{
					"command": "git.stage",
					"group": "inline@2",
					"when": "scmProvider == git && scmResourceGroup == merge"
				},
				{
					"command": "git.revealFileInOS.linux",
					"group": "2_view@1",
					"when": "scmProvider == git && scmResourceGroup == merge && remoteName == '' && isLinux"
				},
				{
					"command": "git.revealFileInOS.mac",
					"group": "2_view@1",
					"when": "scmProvider == git && scmResourceGroup == merge && remoteName == '' && isMac"
				},
				{
					"command": "git.revealFileInOS.windows",
					"group": "2_view@1",
					"when": "scmProvider == git && scmResourceGroup == merge && remoteName == '' && isWindows"
				},
				{
					"command": "git.revealInExplorer",
					"group": "2_view@2",
					"when": "scmProvider == git && scmResourceGroup == merge"
				},
				{
					"command": "git.openFile2",
					"group": "inline@1",
					"when": "scmProvider == git && scmResourceGroup == merge && config.git.showInlineOpenFileAction && config.git.openDiffOnClick"
				},
				{
					"command": "git.openChange",
					"group": "inline@1",
					"when": "scmProvider == git && scmResourceGroup == merge && config.git.showInlineOpenFileAction && !config.git.openDiffOnClick"
				},
				{
					"command": "git.openChange",
					"group": "navigation",
					"when": "scmProvider == git && scmResourceGroup == index"
				},
				{
					"command": "git.openFile",
					"group": "navigation",
					"when": "scmProvider == git && scmResourceGroup == index"
				},
				{
					"command": "git.openHEADFile",
					"group": "navigation",
					"when": "scmProvider == git && scmResourceGroup == index"
				},
				{
					"command": "git.unstage",
					"group": "1_modification",
					"when": "scmProvider == git && scmResourceGroup == index"
				},
				{
					"command": "git.unstage",
					"group": "inline@2",
					"when": "scmProvider == git && scmResourceGroup == index"
				},
				{
					"command": "git.revealFileInOS.linux",
					"group": "2_view@1",
					"when": "scmProvider == git && scmResourceGroup == index && remoteName == '' && isLinux"
				},
				{
					"command": "git.revealFileInOS.mac",
					"group": "2_view@1",
					"when": "scmProvider == git && scmResourceGroup == index && remoteName == '' && isMac"
				},
				{
					"command": "git.revealFileInOS.windows",
					"group": "2_view@1",
					"when": "scmProvider == git && scmResourceGroup == index && remoteName == '' && isWindows"
				},
				{
					"command": "git.revealInExplorer",
					"group": "2_view@2",
					"when": "scmProvider == git && scmResourceGroup == index"
				},
				{
					"command": "git.openFile2",
					"group": "inline@1",
					"when": "scmProvider == git && scmResourceGroup == index && config.git.showInlineOpenFileAction && config.git.openDiffOnClick"
				},
				{
					"command": "git.openChange",
					"group": "inline@1",
					"when": "scmProvider == git && scmResourceGroup == index && config.git.showInlineOpenFileAction && !config.git.openDiffOnClick"
				},
				{
					"command": "git.openChange",
					"group": "navigation",
					"when": "scmProvider == git && scmResourceGroup == workingTree"
				},
				{
					"command": "git.openHEADFile",
					"group": "navigation",
					"when": "scmProvider == git && scmResourceGroup == workingTree"
				},
				{
					"command": "git.openFile",
					"group": "navigation",
					"when": "scmProvider == git && scmResourceGroup == workingTree"
				},
				{
					"command": "git.stage",
					"group": "1_modification",
					"when": "scmProvider == git && scmResourceGroup == workingTree"
				},
				{
					"command": "git.clean",
					"group": "1_modification",
					"when": "scmProvider == git && scmResourceGroup == workingTree"
				},
				{
					"command": "git.clean",
					"group": "inline@2",
					"when": "scmProvider == git && scmResourceGroup == workingTree"
				},
				{
					"command": "git.stage",
					"group": "inline@2",
					"when": "scmProvider == git && scmResourceGroup == workingTree"
				},
				{
					"command": "git.openFile2",
					"group": "inline@1",
					"when": "scmProvider == git && scmResourceGroup == workingTree && config.git.showInlineOpenFileAction && config.git.openDiffOnClick"
				},
				{
					"command": "git.openChange",
					"group": "inline@1",
					"when": "scmProvider == git && scmResourceGroup == workingTree && config.git.showInlineOpenFileAction && !config.git.openDiffOnClick"
				},
				{
					"command": "git.ignore",
					"group": "1_modification@3",
					"when": "scmProvider == git && scmResourceGroup == workingTree"
				},
				{
					"command": "git.revealFileInOS.linux",
					"group": "2_view@1",
					"when": "scmProvider == git && scmResourceGroup == workingTree && remoteName == '' && isLinux"
				},
				{
					"command": "git.revealFileInOS.mac",
					"group": "2_view@1",
					"when": "scmProvider == git && scmResourceGroup == workingTree && remoteName == '' && isMac"
				},
				{
					"command": "git.revealFileInOS.windows",
					"group": "2_view@1",
					"when": "scmProvider == git && scmResourceGroup == workingTree && remoteName == '' && isWindows"
				},
				{
					"command": "git.revealInExplorer",
					"group": "2_view@2",
					"when": "scmProvider == git && scmResourceGroup == workingTree"
				},
				{
					"command": "git.openChange",
					"group": "navigation",
					"when": "scmProvider == git && scmResourceGroup == untracked"
				},
				{
					"command": "git.openHEADFile",
					"group": "navigation",
					"when": "scmProvider == git && scmResourceGroup == untracked"
				},
				{
					"command": "git.openFile",
					"group": "navigation",
					"when": "scmProvider == git && scmResourceGroup == untracked"
				},
				{
					"command": "git.stage",
					"group": "1_modification",
					"when": "scmProvider == git && scmResourceGroup == untracked"
				},
				{
					"command": "git.clean",
					"group": "1_modification",
					"when": "scmProvider == git && scmResourceGroup == untracked && !gitFreshRepository"
				},
				{
					"command": "git.clean",
					"group": "inline@2",
					"when": "scmProvider == git && scmResourceGroup == untracked && !gitFreshRepository"
				},
				{
					"command": "git.stage",
					"group": "inline@2",
					"when": "scmProvider == git && scmResourceGroup == untracked"
				},
				{
					"command": "git.openFile2",
					"group": "inline@1",
					"when": "scmProvider == git && scmResourceGroup == untracked && config.git.showInlineOpenFileAction && config.git.openDiffOnClick"
				},
				{
					"command": "git.openChange",
					"group": "inline@1",
					"when": "scmProvider == git && scmResourceGroup == untracked && config.git.showInlineOpenFileAction && !config.git.openDiffOnClick"
				},
				{
					"command": "git.ignore",
					"group": "1_modification@3",
					"when": "scmProvider == git && scmResourceGroup == untracked"
				}
			],
			"scm/sourceControl": [
				{
					"command": "git.close",
					"group": "navigation@1",
					"when": "scmProvider == git"
				},
				{
					"command": "git.closeOtherRepositories",
					"group": "navigation@2",
					"when": "scmProvider == git && gitOpenRepositoryCount > 1"
				}
			],
			"scm/sourceControl/title": [
				{
					"command": "git.reopenClosedRepositories",
					"group": "navigation@1",
					"when": "git.closedRepositoryCount > 0"
				}
			],
			"scm/title": [
				{
					"command": "git.commit",
					"group": "navigation",
					"when": "scmProvider == git"
				},
				{
					"command": "git.refresh",
					"group": "navigation",
					"when": "scmProvider == git"
				},
				{
					"command": "git.pull",
					"group": "1_header@1",
					"when": "scmProvider == git"
				},
				{
					"command": "git.push",
					"group": "1_header@2",
					"when": "scmProvider == git"
				},
				{
					"command": "git.clone",
					"group": "1_header@3",
					"when": "scmProvider == git"
				},
				{
					"command": "git.checkout",
					"group": "1_header@4",
					"when": "scmProvider == git"
				},
				{
					"command": "git.fetch",
					"group": "1_header@5",
					"when": "scmProvider == git"
				},
				{
					"group": "2_main@1",
					"submenu": "git.commit",
					"when": "scmProvider == git"
				},
				{
					"group": "2_main@2",
					"submenu": "git.changes",
					"when": "scmProvider == git"
				},
				{
					"group": "2_main@3",
					"submenu": "git.pullpush",
					"when": "scmProvider == git"
				},
				{
					"group": "2_main@4",
					"submenu": "git.branch",
					"when": "scmProvider == git"
				},
				{
					"group": "2_main@5",
					"submenu": "git.remotes",
					"when": "scmProvider == git"
				},
				{
					"group": "2_main@6",
					"submenu": "git.stash",
					"when": "scmProvider == git"
				},
				{
					"group": "2_main@7",
					"submenu": "git.tags",
					"when": "scmProvider == git"
				},
				{
					"command": "git.showOutput",
					"group": "3_footer",
					"when": "scmProvider == git"
				}
			],
			"timeline/item/context": [
				{
					"command": "git.timeline.viewCommit",
					"group": "inline",
					"when": "config.git.enabled && !git.missing && timelineItem =~ /git:file:commit\\b/ && !listMultiSelection && config.multiDiffEditor.experimental.enabled"
				},
				{
					"command": "git.timeline.openDiff",
					"group": "1_actions@1",
					"when": "config.git.enabled && !git.missing && timelineItem =~ /git:file\\b/ && !listMultiSelection"
				},
				{
					"command": "git.timeline.viewCommit",
					"group": "1_actions@2",
					"when": "config.git.enabled && !git.missing && timelineItem =~ /git:file:commit\\b/ && !listMultiSelection && config.multiDiffEditor.experimental.enabled"
				},
				{
					"command": "git.timeline.compareWithSelected",
					"group": "3_compare@1",
					"when": "config.git.enabled && !git.missing && git.timeline.selectedForCompare && timelineItem =~ /git:file\\b/ && !listMultiSelection"
				},
				{
					"command": "git.timeline.selectForCompare",
					"group": "3_compare@2",
					"when": "config.git.enabled && !git.missing && timelineItem =~ /git:file\\b/ && !listMultiSelection"
				},
				{
					"command": "git.timeline.copyCommitId",
					"group": "5_copy@1",
					"when": "config.git.enabled && !git.missing && timelineItem =~ /git:file:commit\\b/ && !listMultiSelection"
				},
				{
					"command": "git.timeline.copyCommitMessage",
					"group": "5_copy@2",
					"when": "config.git.enabled && !git.missing && timelineItem =~ /git:file:commit\\b/ && !listMultiSelection"
				}
			]
		},
		"submenus": [
			{
				"id": "git.commit",
				"label": "%submenu.commit%"
			},
			{
				"id": "git.changes",
				"label": "%submenu.changes%"
			},
			{
				"id": "git.pullpush",
				"label": "%submenu.pullpush%"
			},
			{
				"id": "git.branch",
				"label": "%submenu.branch%"
			},
			{
				"id": "git.remotes",
				"label": "%submenu.remotes%"
			},
			{
				"id": "git.stash",
				"label": "%submenu.stash%"
			},
			{
				"id": "git.tags",
				"label": "%submenu.tags%"
			}
		],
		"viewsWelcome": [
			{
				"contents": "%view.workbench.scm.disabled%",
				"view": "scm",
				"when": "!config.git.enabled"
			},
			{
				"contents": "%view.workbench.scm.missing%",
				"view": "scm",
				"when": "config.git.enabled && git.missing && remoteName != ''"
			},
			{
				"contents": "%view.workbench.scm.missing.mac%",
				"view": "scm",
				"when": "config.git.enabled && git.missing && remoteName == '' && isMac"
			},
			{
				"contents": "%view.workbench.scm.missing.windows%",
				"view": "scm",
				"when": "config.git.enabled && git.missing && remoteName == '' && isWindows"
			},
			{
				"contents": "%view.workbench.scm.missing.linux%",
				"view": "scm",
				"when": "config.git.enabled && git.missing && remoteName == '' && isLinux"
			},
			{
				"contents": "%view.workbench.scm.empty%",
				"enablement": "git.state == initialized",
				"group": "2_open@1",
				"view": "scm",
				"when": "config.git.enabled && !git.missing && workbenchState == empty && git.parentRepositoryCount == 0 && git.unsafeRepositoryCount == 0 && git.closedRepositoryCount == 0"
			},
			{
				"contents": "%view.workbench.scm.emptyWorkspace%",
				"enablement": "git.state == initialized",
				"group": "2_open@1",
				"view": "scm",
				"when": "config.git.enabled && !git.missing && workbenchState == workspace && workspaceFolderCount == 0 && git.parentRepositoryCount == 0 && git.unsafeRepositoryCount == 0 && git.closedRepositoryCount == 0"
			},
			{
				"contents": "%view.workbench.scm.scanFolderForRepositories%",
				"view": "scm",
				"when": "config.git.enabled && !git.missing && workbenchState == folder && workspaceFolderCount != 0 && git.state != initialized"
			},
			{
				"contents": "%view.workbench.scm.scanWorkspaceForRepositories%",
				"view": "scm",
				"when": "config.git.enabled && !git.missing && workbenchState == workspace && workspaceFolderCount != 0 && git.state != initialized"
			},
			{
				"contents": "%view.workbench.scm.folder%",
				"group": "5_scm@1",
				"view": "scm",
				"when": "config.git.enabled && !git.missing && git.state == initialized && workbenchState == folder && scm.providerCount == 0 && git.parentRepositoryCount == 0 && git.unsafeRepositoryCount == 0 && git.closedRepositoryCount == 0 && remoteName != 'codespaces'"
			},
			{
				"contents": "%view.workbench.scm.workspace%",
				"group": "5_scm@1",
				"view": "scm",
				"when": "config.git.enabled && !git.missing && git.state == initialized && workbenchState == workspace && workspaceFolderCount != 0 && scm.providerCount == 0 && git.parentRepositoryCount == 0 && git.unsafeRepositoryCount == 0 && git.closedRepositoryCount == 0 && remoteName != 'codespaces'"
			},
			{
				"contents": "%view.workbench.scm.repositoryInParentFolders%",
				"view": "scm",
				"when": "config.git.enabled && !git.missing && git.state == initialized && git.parentRepositoryCount == 1"
			},
			{
				"contents": "%view.workbench.scm.repositoriesInParentFolders%",
				"view": "scm",
				"when": "config.git.enabled && !git.missing && git.state == initialized && git.parentRepositoryCount > 1"
			},
			{
				"contents": "%view.workbench.scm.unsafeRepository%",
				"view": "scm",
				"when": "config.git.enabled && !git.missing && git.state == initialized && git.unsafeRepositoryCount == 1"
			},
			{
				"contents": "%view.workbench.scm.unsafeRepositories%",
				"view": "scm",
				"when": "config.git.enabled && !git.missing && git.state == initialized && git.unsafeRepositoryCount > 1"
			},
			{
				"contents": "%view.workbench.scm.closedRepository%",
				"view": "scm",
				"when": "config.git.enabled && !git.missing && git.state == initialized && git.closedRepositoryCount == 1"
			},
			{
				"contents": "%view.workbench.scm.closedRepositories%",
				"view": "scm",
				"when": "config.git.enabled && !git.missing && git.state == initialized && git.closedRepositoryCount > 1"
			},
			{
				"contents": "%view.workbench.cloneRepository%",
				"group": "5_scm@1",
				"view": "explorer",
				"when": "config.git.enabled && git.state == initialized && scm.providerCount == 0"
			},
			{
				"contents": "%view.workbench.learnMore%",
				"group": "5_scm@10",
				"view": "explorer",
				"when": "config.git.enabled && git.state == initialized && scm.providerCount == 0"
			}
		]
	},
	"activationEvents": [
		"*",
		"onEditSession:file",
		"onFileSystem:git",
		"onFileSystem:git-show"
	],
	"dependencies": {
		"@joaomoreno/unique-names-generator": "^5.2.0",
		"byline": "^5.0.0",
		"file-type": "16.5.4",
		"jschardet": "3.1.4",
		"picomatch": "2.3.1",
		"which": "4.0.0"
	},
	"devDependencies": {
		"@types/byline": "4.2.31",
		"@types/node": "20.x",
		"@types/picomatch": "2.3.0",
		"@types/which": "3.0.0"
	},
	"extensionDependencies": [
		"vscode.git-base"
	],
	"icon": "resources/icons/git.png",
	"aiKey": "0c6ae279ed8443289764825290e4f9e2-1a736e7c-1324-4338-be46-fc2a58ae4d14-7255",
	"capabilities": {
		"untrustedWorkspaces": {
			"supported": false
		},
		"virtualWorkspaces": true
	},
	"enabledApiProposals": [
		"canonicalUriProvider",
		"contribEditSessions",
		"contribEditorContentMenu",
		"contribMergeEditorMenus",
		"contribMultiDiffEditorMenus",
		"contribDiffEditorGutterToolBarMenus",
		"contribSourceControlHistoryItemMenu",
		"contribSourceControlHistoryTitleMenu",
		"contribSourceControlInputBoxMenu",
		"contribSourceControlTitleMenu",
		"contribViewsWelcome",
		"diffCommand",
		"editSessionIdentityProvider",
		"quickDiffProvider",
		"quickInputButtonLocation",
		"quickPickSortByLabel",
		"scmActionButton",
		"scmHistoryProvider",
		"scmMultiDiffEditor",
		"scmSelectedProvider",
		"scmTextDocument",
		"scmValidation",
		"tabInputMultiDiff",
		"tabInputTextMerge",
		"textEditorDiffInformation",
		"timeline"
	]
}
